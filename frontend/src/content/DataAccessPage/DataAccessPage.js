import React from 'react';
import {
  Link,
  Button,
  CodeSnippet,
  ToastNotification,
} from 'carbon-components-react';
import { Sql32, Api_132, Csv32 } from '@carbon/icons-react';

let config = require('../../config.json');

let slq_payload = `payload = {
  query      : QUERY,
  scale_down : 5
}`;

let list_payload = `payload = {
  state_short_name : SHORT_NAME,
  filter_data      : LIST_OF_NAMES,
  scale_down       : 5
}`;

let complex_query = `[
    {
        "title": "DL_vaccination",
        "columns": []
    },
    {
        "title": "DL_case_info",
        "columns": [
            "cases_positive",
            "cases_recovered"
        ]
    },
    {
        "title": "DL_containment",
        "columns": [
            "containment_zones"
        ]
    }
]`;

let date_payload = `payload = {
  state_short_name : SHORT_NAME,
  date             : DATE
}`;

class DataAccessPage extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      db_access: null,
      api_access: null,
      csv_access: null,
    };
  }

  componentDidMount(props) {}

  render() {
    return (
      <div
        className="bx--grid bx--grid--full-width bx--container"
        style={{
          width: '100%',
          minHeight: '100vh',
        }}>
        <div className="bx--col-lg-12">
          <h3>
            {' '}
            <Sql32 className="text-blue" /> Download the SQL Database{' '}
            {this.state.db_access && (
              <span style={{ fontSize: 'x-large' }}>
                {this.state.db_access} downloads
              </span>
            )}
          </h3>
          <hr />
          <p>
            The easiest way to access all the data at once is through the SQL
            Database generated by the project. You can either download the
            database below or run the code locally on your machine to generate
            variations of it according to your requirements.
          </p>
          <br />
          <p>
            You can find the DB schemas for each state on its corresponding page
            here or on the{' '}
            <Link href={config['metadata']['link_to_schemas']} target="_blank">
              GitHub Wiki
            </Link>
            . You can also fetch the data on some particular date, on each
            state-level page, to see what it looks like.
          </p>
          <br />
          <Link
            href={config['metadata']['link_to_data']}
            target="_blank"
            className="button-generic">
            <Button size="small">Download</Button>
          </Link>
          <Link
            href={config['metadata']['link_to_code']}
            target="_blank"
            className="button-generic">
            <Button size="small" kind="secondary">
              Code
            </Button>
          </Link>
        </div>
        <br />
        <br />
        <br />
        <div className="bx--col-lg-12">
          <h3>
            {' '}
            <Csv32 className="text-blue" /> Download in CSV form{' '}
            {this.state.db_access && (
              <span style={{ fontSize: 'x-large' }}>
                {this.state.csv_access} downloads
              </span>
            )}
          </h3>
          <hr />
          <div className="bx--row">
            <div className="bx--col-lg-4">
              <img
                src="https://www.dropbox.com/s/fdswek50t75j9bs/export_csv_india_covid_data.png?raw=1"
                width="100%"
                alt="CSV export button"
              />
            </div>

            <div className="bx--col-lg-12">
              <p>
                If you prefer to download the data in CSV form, you can do so by
                navigating to each state page. The data selector lets you pick
                one or more tables and optionally one or more columns within
                those selected tables to visualize. Once the graphs render you
                can select the CSV export option on the top right corner of the
                image for the ones you want to save. Note that the data is
                sampled at the rate selected on top of each page before making
                the call for rendering.
              </p>
              <br />
              <p>
                Remember that not all data is time series and may not be
                available to visualize on each state-level page, e.g. individual
                case data for Tamil Nadu. For full access to data, we recommend
                using the APIs or the SQL DB.
              </p>
            </div>
          </div>
        </div>
        <br />
        <br />
        <br />
        <div className="bx--col-lg-12" style={{ marginBottom: '100px' }}>
          <h3>
            {' '}
            <Api_132 className="text-blue" /> Connect to the API{' '}
            {this.state.db_access && (
              <span style={{ fontSize: 'x-large' }}>
                {this.state.api_access} downloads
              </span>
            )}
          </h3>
          <hr />
          <p>
            There are several ways to interface to the data through the API.{' '}
            <strong>
              If you need to use the API with a large volume of requests, please
              set up your own server with the server side code provided{' '}
              <Link
                href={
                  config['metadata']['link_to_code'] + '/tree/main/serve_db'
                }
                target="_blank">
                here
              </Link>{' '}
              with the downloaded DB.
            </strong>
          </p>
          <br />
          <h4>1. Query through SQL</h4>
          <br />
          <p>
            One way to access the data through the API is directly through an
            SQL query. For some examples of SQL queries, please check out the
            "Highlights" sections on the{' '}
            <Link href="/#/analysis">Inter-State Comparison page</Link> and the
            individual state-level pages where evailable e.g.{' '}
            <Link href="/#/Delhi">Delhi</Link> and{' '}
            <Link href="/#/WestBengal">West Bengal</Link>.
          </p>
          <br />
          <CodeSnippet type="single">
            POST {config['metadata']['data_server']}/query
          </CodeSnippet>
          <br />
          <CodeSnippet type="multi">{slq_payload}</CodeSnippet>
          <br />
          <p>
            The variable <span className="fake-backticks">scale_down</span> is
            optional and indicates how many per days you want to sample the data
            by. By defualt, it is set to 1 indicating that unless specified you
            will get the data from all the dates when data is available.
          </p>
          <br />
          <h4>2. Query through Table or Column Name</h4>
          <br />
          <p>
            You can query the API with a{' '}
            <span className="fake-backticks">TABLE</span> and a{' '}
            <span className="fake-backticks">COLUMN</span> refering to the data
            tables of a state bulletin. With no column specified, you will get
            all the columns for the table. For valid table names, and columns in
            them, refer to the{' '}
            <Link href={config['metadata']['link_to_schemas']} target="_blank">
              Wiki page on GitHub
            </Link>{' '}
            or to the DB schemas presented on the individual state pages (or
            through the API as described below). The{' '}
            <span className="fake-backticks">SHORT_NAME</span> used for the
            state can be found in the{' '}
            <Link
              href="https://github.com/IBM/covid19-india-data/blob/main/frontend/src/config.json"
              target="_blank">
              configuration file
            </Link>{' '}
            or in the DB. You can also find the short name indicated on each
            state-level page.
          </p>
          <br />
          <CodeSnippet type="single">
            GET {config['metadata']['data_server']}
            /get_data?state=SHORT_NAME&table=TABLE
          </CodeSnippet>
          <br />
          <CodeSnippet type="single">
            GET {config['metadata']['data_server']}
            /get_data?state=SHORT_NAME&table=TABLE&column=TABLE
          </CodeSnippet>
          <br />
          <p>
            For example, the following queries will fetch the data for all the
            columns in the table titled{' '}
            <span className="fake-backticks">DL_case_info</span> for Delhi for
            every 10 days, and for the column titled{' '}
            <span className="fake-backticks">cases_positive</span> in{' '}
            <span className="fake-backticks">DL_case_info</span> for all days,
            respectively.
          </p>
          <br />
          <CodeSnippet type="single">
            GET{' '}
            <Link
              href={
                config['metadata']['data_server'] +
                '/get_data?state=DL&table=DL_case_info&rate=10'
              }
              target="_blank">
              {config['metadata']['data_server']}
              /get_data?state=DL&table=DL_case_info&rate=10
            </Link>
          </CodeSnippet>
          <br />
          <CodeSnippet type="single">
            GET{' '}
            <Link
              href={
                config['metadata']['data_server'] +
                '/get_data?state=DL&table=DL_case_info&column=cases_positive'
              }
              target="_blank">
              {config['metadata']['data_server']}
              /get_data?state=DL&table=DL_case_info&column=cases_positive
            </Link>
          </CodeSnippet>
          <br />
          <h4>3. Complex Queries</h4>
          <br />
          <p>
            For more complex queries with multiple tables and columns, construct
            the following payload.
          </p>
          <br />
          <CodeSnippet type="single">
            POST {config['metadata']['data_server']}/fetch_data
          </CodeSnippet>
          <br />
          <CodeSnippet type="multi">{list_payload}</CodeSnippet>
          <br />
          <p>
            As before, <span className="fake-backticks">SHORT_NAME</span> refers
            to the short name of an Indian state, as indicated in the{' '}
            <Link
              href="https://github.com/IBM/covid19-india-data/blob/main/frontend/src/config.json"
              target="_blank">
              configuration file
            </Link>{' '}
            or in the DB. You can also find the short name indicated on each
            state-level page.
          </p>
          <br />
          <p>
            The <span className="fake-backticks">LIST_OF_NAMES</span> key
            contains a list of{' '}
            <Link
              href="https://github.com/IBM/covid19-india-data/blob/main/serve_db/schemas.py#L7"
              target="_blank">
              TableSchema
            </Link>{' '}
            objects where each entry is a table name from that state bulletin
            and none or more columns in it. If no columns are specified but a
            table name is mentioned, then the entire table is returned. For
            valid table names and columns in them, refer to the{' '}
            <Link href={config['metadata']['link_to_schemas']} target="_blank">
              Wiki page on GitHub
            </Link>{' '}
            or to the DB schemas presented on the individual state pages (or
            through the API as described below). For example:
          </p>
          <br />
          <CodeSnippet type="multi">{complex_query}</CodeSnippet>
          <br />
          <p>
            This query will return, for the state of{' '}
            <Link href="/#/Delhi">Delhi</Link> (DL), the full table titled
            <span className="fake-backticks">DL_vaccination</span>, columns{' '}
            <span className="fake-backticks">cases_positive</span>
            and <span className="fake-backticks">cases_recovered</span> from
            table <span className="fake-backticks">DL_case_info</span>, and
            column <span className="fake-backticks">containment_zones</span>{' '}
            from table <span className="fake-backticks">DL_containment</span>.
          </p>
          <br />
          <h4>4. Daily Data</h4>
          <br />
          <p>
            While all the previouos examples deal with time-series information,
            you can also query data for a paricular date for a state using its{' '}
            <span className="fake-backticks">SHORT_NAME</span> and your desired
            date in a{' '}
            <Link
              href="https://dateparser.readthedocs.io/en/latest/#basic-usage"
              target="_blank">
              standard format
            </Link>
            .
          </p>
          <br />
          <CodeSnippet type="single">
            POST {config['metadata']['data_server']}/fetch_days_data
          </CodeSnippet>
          <br />
          <CodeSnippet type="multi">{date_payload}</CodeSnippet>
          <br />
          <h4>5. Table Schemas</h4>
          <br />
          <p>
            As we noted previously, the schemas for the DB entries for each
            state is documented on the individual state-level pages, and on the{' '}
            <Link href={config['metadata']['link_to_schemas']} target="_blank">
              GitHub Wiki
            </Link>{' '}
            for the project. You can also retrieve that information through the
            API as follows. It will return the complete list of{' '}
            <Link
              href="https://github.com/IBM/covid19-india-data/blob/main/serve_db/schemas.py#L7"
              target="_blank">
              TableSchema
            </Link>{' '}
            objects for that state.
          </p>
          <br />
          <CodeSnippet type="single">
            POST {config['metadata']['data_server']}/fetch_schema
          </CodeSnippet>

          <div>
            <ToastNotification
              kind="info"
              hideCloseButton
              lowContrast
              caption={
                <Link href={config['metadata']['link_to_code']} target="_blank">
                  GitHub
                </Link>
              }
              iconDescription="describes the close button"
              subtitle={
                <span>
                  If you would like to expand the API, please reach out.
                  Contributions are welcome!
                </span>
              }
              title="Extending the API"
            />
          </div>
        </div>
      </div>
    );
  }
}

export default DataAccessPage;
